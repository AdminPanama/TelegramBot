import os
import random
import string
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Render Environment
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
TON_WALLET = os.getenv("TON_WALLET")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TON_WALLET:
    raise ValueError("‚ùå TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_USERNAME:
    raise ValueError("‚ùå CHANNEL_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)
# ====================

PRICE_PER_STAR = 0.00475  # –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ TON
MIN_STARS = 50
MAX_STARS = 10000

USERS = set()
TOTAL_ORDERS = 0

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏ ===
def generate_tx_id():
    return ''.join(random.choices(string.digits, k=6))

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def is_subscribed(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception:
        return False

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    USERS.add(user_id)

    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
    ]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é ===
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_stars":
        subscribed = await is_subscribed(context.bot, query.from_user.id)
        if not subscribed:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
            ]
            await query.message.reply_text(
                "‚ùå –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
                f"üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @{CHANNEL_USERNAME}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        await query.message.reply_text(
            f"‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MIN_STARS}\n"
            f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_STARS}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É: {PRICE_PER_STAR} TON\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
        )
        context.user_data["waiting_for_stars"] = True

    elif query.data == "check_sub":
        subscribed = await is_subscribed(context.bot, query.from_user.id)
        if subscribed:
            await query.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã.")
            # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É —Å–Ω–æ–≤–∞
            await menu_handler(Update(update.update_id, message=query.message), context)
        else:
            keyboard = [
                [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
            ]
            await query.message.reply_text(
                f"‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{CHANNEL_USERNAME}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    elif query.data == "history":
        history = context.user_data.get("history", [])
        if history:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n" + "\n".join(history)
        else:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        await query.message.reply_text(text)

    elif query.data == "fake_buy":
        phrases = [
            "üö´ –ù–µ—Ç –¥–µ–Ω–µ–≥ ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç–∫–∏ üç≠",
            "ü§ó –í—Å—ë –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏! –ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π üíº",
            "ü•≤ –•–∞–ª—è–≤—ã –Ω–µ—Ç, –±—Ä–∞—Ç‚Ä¶ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –∏ TON üíé",
            "üêí –û–±–µ–∑—å—è–Ω–∞ —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –ø–æ—à–ª–∞ –±–∞–Ω–∞–Ω—ã —Å–æ–±–∏—Ä–∞—Ç—å üçå",
            "üï∫ –ó–≤—ë–∑–¥—ã –±–µ–∑ –¥–µ–Ω–µ–≥? –≠—Ç–æ –Ω–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –¥—Ä—É–∂–∏—â–µ üåå",
            "üòé –†–∞–±–æ—Ç–∞–π, –ø–ª–∞—Ç–∏ ‚Äî –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã. –í—Å—ë –ø—Ä–æ—Å—Ç–æ üöÄ",
            "üèöÔ∏è –í –∫—Ä–µ–¥–∏—Ç –∑–≤—ë–∑–¥—ã –Ω–µ –≤—ã–¥–∞—ë–º, —Å–æ—Ä—Ä–∏ üí≥",
            "ü§° –ê–≥–∞, —â–∞—Å! –ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Å—ã—Ä‚Ä¶ –∏ —Ç–æ –≤ –º—ã—à–µ–ª–æ–≤–∫–µ üßÄ",
            "üßò –¢–µ—Ä–ø–µ–Ω–∏–µ, –º–æ–ª–æ–¥–µ—Ü. –î–µ–Ω–µ–≥ –Ω–µ—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –∫–æ–ø–∏—Ç—å üôè",
            "ü™ô TON –Ω–µ —Ä–∞—Å—Ç—É—Ç –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö, –∏—Ö –º–∞–π–Ω—è—Ç üíª"
        ]
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        await query.message.reply_text(random.choice(phrases), reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
            [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
        ]
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–≤–æ–¥ –∫–æ–ª-–≤–∞ –∑–≤—ë–∑–¥) ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_stars"):
        try:
            stars = int(update.message.text)
            if stars < MIN_STARS or stars > MAX_STARS:
                await update.message.reply_text(
                    f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_STARS} –¥–æ {MAX_STARS}."
                )
                return

            amount_ton = stars * PRICE_PER_STAR
            tx_id = generate_tx_id()
            context.user_data["waiting_for_stars"] = False

            text = (
                f"üí∞ –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}\n"
                f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {stars}\n"
                f"üíé –°—É–º–º–∞: {amount_ton:.2f} TON\n\n"
                f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount_ton:.2f} TON –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
                f"`{TON_WALLET}`\n\n"
                "üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
            )
            await update.message.reply_text(text, parse_mode="Markdown")

            context.user_data["pending_order"] = {
                "id": tx_id,
                "stars": stars,
                "amount": amount_ton,
                "status": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            }

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç) ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "pending_order" in context.user_data:
        order = context.user_data["pending_order"]

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{update.message.from_user.id}_{order['id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.message.from_user.id}_{order['id']}")
            ]
        ]

        await context.bot.send_message(
            ADMIN_ID,
            f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username}\n"
            f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {order['stars']}\n"
            f"üíé –°—É–º–º–∞: {order['amount']:.2f} TON\n"
            f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']}\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        await update.message.reply_text(
            "üì§ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

# === –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç ===
async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("confirm_"):
        _, user_id, tx_id = query.data.split("_")
        user_id = int(user_id)

        order = context.user_data.get("pending_order")
        if order and order["id"] == tx_id:
            order["status"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
            context.user_data.setdefault("history", []).append(
                f"‚≠ê {order['stars']} | {order['amount']:.2f} TON | ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
            )

            await context.bot.send_message(
                user_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"‚≠ê –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {order['stars']} –∑–≤—ë–∑–¥.\n"
                f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']}"
            )
            await query.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    elif query.data.startswith("reject_"):
        _, user_id, tx_id = query.data.split("_")
        user_id = int(user_id)

        order = context.user_data.get("pending_order")
        if order and order["id"] == tx_id:
            order["status"] = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            context.user_data.setdefault("history", []).append(
                f"‚≠ê {order['stars']} | {order['amount']:.2f} TON | ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            )

            await context.bot.send_message(
                user_id,
                f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']}"
            )
            await query.message.reply_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# === –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id == ADMIN_ID:
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS)}\n"
            f"üõí –ó–∞—è–≤–æ–∫: {TOTAL_ORDERS}"
        )

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(CallbackQueryHandler(admin_handler, pattern="^(confirm_|reject_)"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()

if __name__ == "__main__":
    main()
