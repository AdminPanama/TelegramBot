import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# ==================== #
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==================== #
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ==================== #
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==================== #
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

DB_PATH = "bot.db"
REF_PERCENT = 0.01  # 1% –±–æ–Ω—É—Å –æ—Ç –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

# ==================== #
# –†–∞–±–æ—Ç–∞ —Å –ë–î
# ==================== #
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        balance REAL DEFAULT 0,
        invited_by INTEGER,
        ref_balance REAL DEFAULT 0,
        total_ref_earned REAL DEFAULT 0
    )""")

    # –∑–∞–∫–∞–∑—ã
    c.execute("""CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        status TEXT
    )""")

    conn.commit()
    conn.close()

def add_user(user_id, username, invited_by=None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT id FROM users WHERE id=?", (user_id,))
    if not c.fetchone():
        c.execute("INSERT INTO users (id, username, invited_by) VALUES (?, ?, ?)",
                  (user_id, username, invited_by))
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return {
            "id": row[0],
            "username": row[1],
            "balance": row[2],
            "invited_by": row[3],
            "ref_balance": row[4],
            "total_ref_earned": row[5]
        }
    return None

def update_balance(user_id, amount):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE id=?", (amount, user_id))
    conn.commit()
    conn.close()

def add_ref_bonus(user_id, bonus):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""UPDATE users 
                 SET ref_balance = ref_balance + ?, 
                     total_ref_earned = total_ref_earned + ? 
                 WHERE id=?""", (bonus, bonus, user_id))
    conn.commit()
    conn.close()

def add_order(user_id, amount):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO orders (user_id, amount, status) VALUES (?, ?, ?)",
              (user_id, amount, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"))
    conn.commit()
    conn.close()
    return c.lastrowid

def update_order_status(order_id, status):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE orders SET status=? WHERE id=?", (status, order_id))
    conn.commit()
    conn.close()

# ==================== #
# –ö–æ–º–∞–Ω–¥—ã
# ==================== #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ref_id = None

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–∫–∞
    if context.args:
        try:
            ref_id = int(context.args[0])
        except ValueError:
            pass

    add_user(user.id, user.username, ref_id)

    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref_system")],
        [InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥ ‚≠ê.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–º–æ—â–∏.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É")

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM users")
    users_count = c.fetchone()[0]
    conn.close()

    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")

# ==================== #
# –ö–Ω–æ–ø–∫–∏
# ==================== #
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "buy_stars":
        await query.edit_message_text("üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (–≤ –∑–≤—ë–∑–¥–∞—Ö).")
        context.user_data["awaiting_payment"] = True

    elif query.data == "ref_system":
        user = get_user(user_id)
        ref_link = f"https://t.me/{context.bot.username}?start={user_id}"
        await query.edit_message_text(
            f"ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user['ref_balance']:.2f} ‚≠ê\n"
            f"üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_ref_earned']:.2f} ‚≠ê\n\n"
            "‚ö° –í—ã–≤–æ–¥ –±–æ–Ω—É—Å–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–∫–æ—Ä–æ.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π! üöÄ"
        )

    elif query.data == "help":
        await query.edit_message_text("üì© –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º –¥–ª—è –ø–æ–º–æ—â–∏.")

    elif query.data.startswith("confirm_"):
        _, user_id, order_id, amount = query.data.split("_")
        user_id, order_id, amount = int(user_id), int(order_id), float(amount)

        update_order_status(order_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
        update_balance(user_id, amount)

        # –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ –±–æ–Ω—É—Å
        user = get_user(user_id)
        if user and user["invited_by"]:
            bonus = amount * REF_PERCENT
            add_ref_bonus(user["invited_by"], bonus)

        await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê.")

    elif query.data.startswith("reject_"):
        _, user_id, order_id = query.data.split("_")
        order_id = int(order_id)
        update_order_status(order_id, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await query.edit_message_text(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

# ==================== #
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ==================== #
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –µ—Å–ª–∏ –∂–¥—ë–º –æ–ø–ª–∞—Ç—É
    if context.user_data.get("awaiting_payment"):
        try:
            amount = float(text)
        except ValueError:
            return await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥).")

        order_id = add_order(user_id, amount)
        context.user_data["awaiting_payment"] = False

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}_{order_id}_{amount}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{order_id}")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì© –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                 f"–°—É–º–º–∞: {amount} ‚≠ê",
            reply_markup=markup
        )

        await update.message.reply_text("üïê –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")


# ==================== #
# –ó–∞–ø—É—Å–∫
# ==================== #
def main():
    init_db()
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats))

    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
