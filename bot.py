import os
import random
import string
from typing import Optional, List

import asyncpg
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ==================== ENV ====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
TON_WALLET = os.getenv("TON_WALLET")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
DATABASE_URL = os.getenv("DATABASE_URL")          # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Render Postgres

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TON_WALLET:
    raise ValueError("‚ùå TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_USERNAME:
    raise ValueError("‚ùå CHANNEL_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)

# ==================== CONSTANTS ====================
PRICE_PER_STAR = 0.00475  # –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ TON
MIN_STARS = 50
MAX_STARS = 10000
REF_PERCENT = 0.01  # 1% –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (–∫–æ–ø–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ, –≤—ã–≤–æ–¥ –ø–æ—Ç–æ–º)

# ==================== DB POOL ====================
POOL: Optional[asyncpg.Pool] = None


async def init_db():
    global POOL
    POOL = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
    async with POOL.acquire() as conn:
        # users: —Ö—Ä–∞–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, —Ä–µ—Ñ.–¥–æ—Ö–æ–¥, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id   BIGINT PRIMARY KEY,
                username  TEXT,
                balance   INTEGER NOT NULL DEFAULT 0,
                ref_earned NUMERIC NOT NULL DEFAULT 0,
                inviter   BIGINT
            );
        """)
        # history: –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS history (
                id        SERIAL PRIMARY KEY,
                user_id   BIGINT NOT NULL,
                record    TEXT NOT NULL,
                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
            );
        """)
        # orders: –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–≤—ë–∑–¥
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id        SERIAL PRIMARY KEY,
                order_id  TEXT UNIQUE NOT NULL,       -- –Ω–∞—à 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
                user_id   BIGINT NOT NULL,
                stars     INTEGER NOT NULL,
                amount    NUMERIC NOT NULL,
                status    TEXT NOT NULL,              -- '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' | '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' | '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
            );
        """)

# ==================== DB HELPERS ====================

async def ensure_user(user_id: int, username: str, inviter: Optional[int]):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç. –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ."""
    async with POOL.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, username, inviter)
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id) DO NOTHING
        """, user_id, username, inviter)

async def update_username_if_changed(user_id: int, username: str):
    async with POOL.acquire() as conn:
        await conn.execute("UPDATE users SET username=$1 WHERE user_id=$2 AND username IS DISTINCT FROM $1",
                           username, user_id)

async def add_history(user_id: int, text: str):
    async with POOL.acquire() as conn:
        await conn.execute("INSERT INTO history (user_id, record) VALUES ($1, $2)", user_id, text)

async def get_user(user_id: int):
    async with POOL.acquire() as conn:
        return await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)

async def get_user_history(user_id: int) -> List[str]:
    async with POOL.acquire() as conn:
        rows = await conn.fetch("SELECT record FROM history WHERE user_id=$1 ORDER BY created_at DESC LIMIT 50", user_id)
        return [r["record"] for r in rows]

async def all_user_ids() -> List[int]:
    async with POOL.acquire() as conn:
        rows = await conn.fetch("SELECT user_id FROM users")
        return [r["user_id"] for r in rows]

async def change_balance(user_id: int, delta: int, history_text: Optional[str] = None):
    async with POOL.acquire() as conn:
        async with conn.transaction():
            await conn.execute("UPDATE users SET balance = balance + $1 WHERE user_id=$2", delta, user_id)
            if history_text:
                await conn.execute("INSERT INTO history (user_id, record) VALUES ($1, $2)", user_id, history_text)

async def add_ref_earn(inviter_id: int, amount_stars: float):
    # –ö–æ–ø–∏–º —Ä–µ—Ñ.–∑–≤—ë–∑–¥—ã –≤ ref_earned (–Ω–µ –≤ –±–∞–ª–∞–Ω—Å)
    async with POOL.acquire() as conn:
        await conn.execute("UPDATE users SET ref_earned = ref_earned + $1 WHERE user_id=$2", amount_stars, inviter_id)

async def create_order(user_id: int, stars: int, amount: float, order_id: str):
    async with POOL.acquire() as conn:
        await conn.execute("""
            INSERT INTO orders (order_id, user_id, stars, amount, status)
            VALUES ($1, $2, $3, $4, '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
        """, order_id, user_id, stars, amount)

async def last_pending_order(user_id: int):
    async with POOL.acquire() as conn:
        return await conn.fetchrow("""
            SELECT * FROM orders
            WHERE user_id=$1 AND status='–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
            ORDER BY created_at DESC
            LIMIT 1
        """, user_id)

async def set_order_status(order_id: str, new_status: str):
    async with POOL.acquire() as conn:
        await conn.execute("UPDATE orders SET status=$1 WHERE order_id=$2", new_status, order_id)

async def orders_count() -> int:
    async with POOL.acquire() as conn:
        row = await conn.fetchrow("SELECT COUNT(*) AS c FROM orders")
        return row["c"] if row else 0

# ==================== UTILS ====================

def generate_tx_id() -> str:
    return ''.join(random.choices(string.digits, k=6))

def main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref_system")],
        [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
    ])

# ==================== HANDLERS ====================

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    referrer = None
    if context.args:
        # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        try:
            ref_candidate = int(context.args[0])
            if ref_candidate != user_id:
                referrer = ref_candidate
        except:
            referrer = None

    await ensure_user(user_id, user.username or "", referrer)
    await update_username_if_changed(user_id, user.username or "")

    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_menu")]
    ]
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëâ @{CHANNEL_USERNAME}\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "continue_menu":
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "buy_stars":
        await query.message.reply_text(
            f"‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MIN_STARS}\n"
            f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_STARS}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É: {PRICE_PER_STAR} TON\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
        )
        context.user_data["waiting_for_stars"] = True

    elif query.data == "history":
        history = await get_user_history(user_id)
        if history:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n\n" + "\n".join(history)
        else:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        await query.message.reply_text(text)

    elif query.data == "ref_system":
        user = await get_user(user_id)
        balance = user["balance"] if user else 0
        earned = float(user["ref_earned"]) if user else 0.0
        # username –±–æ—Ç–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        bot_username = (await context.bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start={user_id}"

        text = (
            f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"üë§ –í–∞—à ID: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned:.2f} ‚≠ê\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            "üìù –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω SOON. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!"
        )
        await query.message.reply_text(text)

    elif query.data == "fake_buy":
        phrases = [
            "üö´ –ù–µ—Ç –¥–µ–Ω–µ–≥ ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç–∫–∏ üç≠",
            "ü§ó –í—Å—ë –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏! –ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π üíº",
            "ü•≤ –•–∞–ª—è–≤—ã –Ω–µ—Ç, –±—Ä–∞—Ç‚Ä¶ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –∏ TON üíé",
            "üêí –û–±–µ–∑—å—è–Ω–∞ —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –ø–æ—à–ª–∞ –±–∞–Ω–∞–Ω—ã —Å–æ–±–∏—Ä–∞—Ç—å üçå",
            "üï∫ –ó–≤—ë–∑–¥—ã –±–µ–∑ –¥–µ–Ω–µ–≥? –≠—Ç–æ –Ω–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –¥—Ä—É–∂–∏—â–µ üåå",
            "üòé –†–∞–±–æ—Ç–∞–π, –ø–ª–∞—Ç–∏ ‚Äî –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã. –í—Å—ë –ø—Ä–æ—Å—Ç–æ üöÄ",
            "üèöÔ∏è –í –∫—Ä–µ–¥–∏—Ç –∑–≤—ë–∑–¥—ã –Ω–µ –≤—ã–¥–∞—ë–º, —Å–æ—Ä—Ä–∏ üí≥",
            "ü§° –ê–≥–∞, —â–∞—Å! –ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Å—ã—Ä‚Ä¶ –∏ —Ç–æ –≤ –º—ã—à–µ–ª–æ–≤–∫–µ üßÄ",
            "üßò –¢–µ—Ä–ø–µ–Ω–∏–µ, –º–æ–ª–æ–¥–µ—Ü. –î–µ–Ω–µ–≥ –Ω–µ—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –∫–æ–ø–∏—Ç—å üôè",
            "ü™ô TON –Ω–µ —Ä–∞—Å—Ç—É—Ç –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö, –∏—Ö –º–∞–π–Ω—è—Ç üíª"
        ]
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="continue_menu")]]
        await query.message.reply_text(random.choice(phrases), reply_markup=InlineKeyboardMarkup(keyboard))

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("waiting_for_stars"):
        return

    try:
        stars = int(update.message.text.strip())
        if stars < MIN_STARS or stars > MAX_STARS:
            await update.message.reply_text(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_STARS} –¥–æ {MAX_STARS}.")
            return

        amount_ton = stars * PRICE_PER_STAR
        tx_id = generate_tx_id()
        context.user_data["waiting_for_stars"] = False

        await create_order(update.message.from_user.id, stars, amount_ton, tx_id)

        text = (
            f"üí∞ –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}\n"
            f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {stars}\n"
            f"üíé –°—É–º–º–∞: {amount_ton:.2f} TON\n\n"
            f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount_ton:.2f} TON –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
            f"{TON_WALLET}\n\n"
            "üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
        )
        await update.message.reply_text(text)

    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    order = await last_pending_order(user_id)
    if not order:
        await update.message.reply_text("‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏.")
        return

    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—É
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}_{order['order_id']}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",   callback_data=f"reject_{user_id}_{order['order_id']}")
        ]
    ]

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
    photo_file = update.message.photo[-1].file_id
    caption = (
        f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username}\n"
        f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {order['stars']}\n"
        f"üíé –°—É–º–º–∞: {float(order['amount']):.2f} TON\n"
        f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{order['order_id']}\n"
        f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )
    await context.bot.send_photo(
        ADMIN_ID,
        photo=photo_file,
        caption=caption,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    await update.message.reply_text("üì§ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–ª–∞—Ç–∞–º–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if query.from_user.id != ADMIN_ID:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    data = query.data
    if data.startswith("confirm_"):
        _, user_id_str, tx_id = data.split("_")
        user_id = int(user_id_str)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await set_order_status(tx_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∞–≤—Ç–æ–∑–∞—á–∏—Å–ª–µ–Ω–∏—è, –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        async with POOL.acquire() as conn:
            order = await conn.fetchrow("SELECT * FROM orders WHERE order_id=$1", tx_id)
        if order:
            await add_history(user_id, f"‚≠ê {order['stars']} | {float(order['amount']):.2f} TON | ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å 1% –æ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–≤—ë–∑–¥ ‚Äî –≤ ref_earned –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ
            user_row = await get_user(user_id)
            inviter = user_row["inviter"] if user_row else None
            if inviter:
                ref_bonus = round(order["stars"] * REF_PERCENT, 2)
                if ref_bonus > 0:
                    await add_ref_earn(inviter, ref_bonus)

            await context.bot.send_message(
                user_id,
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥ ‚ú®"
            )

        await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–±–µ–∑ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è).")

    elif data.startswith("reject_"):
        _, user_id_str, tx_id = data.split("_")
        user_id = int(user_id_str)

        await set_order_status(tx_id, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        async with POOL.acquire() as conn:
            order = await conn.fetchrow("SELECT * FROM orders WHERE order_id=$1", tx_id)
        if order:
            await add_history(user_id, f"‚≠ê {order['stars']} | {float(order['amount']):.2f} TON | ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            await context.bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüÜî –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}")

        await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# /addstars (–Ω–∞—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
async def add_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    try:
        user_id = int(context.args[0])
        stars = int(context.args[1])
        await change_balance(user_id, stars, f"üéÅ –ê–¥–º–∏–Ω –Ω–∞—á–∏—Å–ª–∏–ª {stars} ‚≠ê")
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars} ‚≠ê")
        try:
            await context.bot.send_message(user_id, f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars} ‚≠ê –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        except:
            pass
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /massaddstars (–º–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞ –≤—Å–µ–º)
async def mass_add_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    try:
        stars = int(context.args[0])

        # –î–µ–ª–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        users = await all_user_ids()
        if not users:
            await update.message.reply_text("‚ùóÔ∏è–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–¥–∞—á–∏.")
            return

        async with POOL.acquire() as conn:
            async with conn.transaction():
                # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å + –∏—Å—Ç–æ—Ä–∏—è
                await conn.executemany(
                    "UPDATE users SET balance = balance + $1 WHERE user_id=$2",
                    [(stars, uid) for uid in users]
                )
                await conn.executemany(
                    "INSERT INTO history (user_id, record) VALUES ($1, $2)",
                    [(uid, f"üéÅ –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ {stars} ‚≠ê") for uid in users]
                )

        # –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–±–ª–æ–∫–∞–Ω–Ω–æ–º –±–æ—Ç–µ)
        sent = 0
        for uid in users:
            try:
                await context.bot.send_message(uid, f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars} ‚≠ê (–º–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞)")
                sent += 1
            except:
                pass

        await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ {stars} ‚≠ê –≤—Å–µ–º ({len(users)}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. " +
                                        f"–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    users_total = len(await all_user_ids())
    orders_total = await orders_count()
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_total}\n"
        f"üõí –ó–∞—è–≤–æ–∫: {orders_total}"
    )

# ==================== APP ====================

def build_app() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("addstars", add_stars))
    app.add_handler(CommandHandler("massaddstars", mass_add_stars))

    app.add_handler(CallbackQueryHandler(admin_handler, pattern="^(confirm_|reject_)"))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    return app

def main():
    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    import asyncio
    asyncio.run(init_db())  # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    main()
