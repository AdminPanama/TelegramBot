import os
import random
import string
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Render Environment
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
TON_WALLET = os.getenv("TON_WALLET")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TON_WALLET:
    raise ValueError("‚ùå TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)
# ====================

PRICE_PER_STAR = 0.00475  # –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ TON
MIN_STARS = 50
MAX_STARS = 10000

# === –§—Ä–∞–∑—ã –¥–ª—è —à—É—Ç–ª–∏–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ ===
JOKES = [
    "üö´ –ù–µ—Ç –¥–µ–Ω–µ–≥ ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç–∫–∏ üç≠",
    "ü§ó –í—Å—ë –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏! –ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π üíº",
    "ü•≤ –•–∞–ª—è–≤—ã –Ω–µ—Ç, –±—Ä–∞—Ç‚Ä¶ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –∏ TON üíé",
    "üêí –û–±–µ–∑—å—è–Ω–∞ —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –ø–æ—à–ª–∞ –±–∞–Ω–∞–Ω—ã —Å–æ–±–∏—Ä–∞—Ç—å üçå",
    "üï∫ –ó–≤—ë–∑–¥—ã –±–µ–∑ –¥–µ–Ω–µ–≥? –≠—Ç–æ –Ω–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –¥—Ä—É–∂–∏—â–µ üåå",
    "üòé –†–∞–±–æ—Ç–∞–π, –ø–ª–∞—Ç–∏ ‚Äî –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã. –í—Å—ë –ø—Ä–æ—Å—Ç–æ üöÄ",
    "üèöÔ∏è –í –∫—Ä–µ–¥–∏—Ç –∑–≤—ë–∑–¥—ã –Ω–µ –≤—ã–¥–∞—ë–º, —Å–æ—Ä—Ä–∏ üí≥",
    "ü§° –ê–≥–∞, —â–∞—Å! –ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Å—ã—Ä‚Ä¶ –∏ —Ç–æ –≤ –º—ã—à–µ–ª–æ–≤–∫–µ üßÄ",
    "üßò –¢–µ—Ä–ø–µ–Ω–∏–µ, –º–æ–ª–æ–¥–µ—Ü. –î–µ–Ω–µ–≥ –Ω–µ—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –∫–æ–ø–∏—Ç—å üôè",
    "ü™ô TON –Ω–µ —Ä–∞—Å—Ç—É—Ç –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö, –∏—Ö –º–∞–π–Ω—è—Ç üíª"
]

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏ ===
def generate_tx_id():
    return ''.join(random.choices(string.digits, k=6))  # –Ω–∞–ø—Ä–∏–º–µ—Ä: 384920


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
    ]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ===
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_stars":
        await query.message.reply_text(
            f"‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {MIN_STARS}\n"
            f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_STARS}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É: {PRICE_PER_STAR} TON\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
        )
        context.user_data["waiting_for_stars"] = True

    elif query.data == "history":
        history = context.user_data.get("history", [])
        if history:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n" + "\n".join(history)
        else:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        await query.message.reply_text(text)

    elif query.data == "fake_buy":
        joke = random.choice(JOKES)
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        await query.message.reply_text(
            joke,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data.startswith("confirm_"):
        tx_id = query.data.split("_")[1]

        for user_id, data in context.application.user_data.items():
            if isinstance(data, dict) and "history" in data:
                for i, record in enumerate(data["history"]):
                    if f"#{tx_id}" in record and "‚è≥" in record:
                        data["history"][i] = record.replace("‚è≥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

                        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]]
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{tx_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ó–≤—ë–∑–¥—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã üéâ",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )

                        await query.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{tx_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
                        return

    elif query.data.startswith("reject_"):
        tx_id = query.data.split("_")[1]

        for user_id, data in context.application.user_data.items():
            if isinstance(data, dict) and "history" in data:
                for i, record in enumerate(data["history"]):
                    if f"#{tx_id}" in record and "‚è≥" in record:
                        data["history"][i] = record.replace("‚è≥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

                        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]]
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{tx_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )

                        await query.message.reply_text(f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ #{tx_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
                        return

    elif query.data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
            [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
        ]
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))


# === –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_stars"):
        try:
            amount = int(update.message.text)
            if amount < MIN_STARS:
                await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º—É–º {MIN_STARS}‚≠ê")
                return
            if amount > MAX_STARS:
                await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_STARS}‚≠ê")
                return

            price = amount * PRICE_PER_STAR

            await update.message.reply_text(
                f"üí≥ –ó–∞ {amount}‚≠ê –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å <b>{price:.4f} TON</b>\n\n"
                f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n<code>{TON_WALLET}</code>\n\n"
                "‚ö†Ô∏è –ó–≤–µ–∑–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–æ 2-—Ö —á–∞—Å–æ–≤ (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç).\n"
                "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="HTML"
            )

            await update.message.reply_text(
                "‚ö†Ô∏è –í–ê–ñ–ù–û!\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞:\n"
                "1Ô∏è‚É£ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                "2Ô∏è‚É£ –í–∞—à @—é–∑–µ—Ä–Ω–µ–π–º\n"
                "3Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠ê –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏"
            )

            context.user_data["waiting_for_stars"] = False
            context.user_data["last_amount"] = amount

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    user = update.message.from_user
    username = f"@{user.username}" if user.username else f"ID:{user.id}"
    user_id = user.id
    amount = context.user_data.get("last_amount", "‚ùì")

    tx_id = generate_tx_id()

    caption = (
        f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
        f"üìå –ó–∞—è–≤–∫–∞: #{tx_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"‚≠ê –û–ø–ª–∞—Ç–∏–ª: {amount} –∑–≤—ë–∑–¥\n"
        f"‚è≥ –°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )

    if "history" not in context.user_data:
        context.user_data["history"] = []
    context.user_data["history"].append(f"[–ó–∞—è–≤–∫–∞ #{tx_id}] {amount}‚≠ê ‚Äî ‚è≥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{tx_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{tx_id}")
    ]])
    await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo, caption=caption, reply_markup=keyboard)

    await update.message.reply_text(
        f"üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! ‚úÖ\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{tx_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )


# === –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ===
async def handle_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("waiting_for_stars"):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.ALL & ~filters.PHOTO, handle_other))

    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
