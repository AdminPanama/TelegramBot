import os
import json
import random
import string
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Render Environment
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
TON_WALLET = os.getenv("TON_WALLET")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TON_WALLET:
    raise ValueError("‚ùå TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_USERNAME:
    raise ValueError("‚ùå CHANNEL_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)

# ====================
PRICE_PER_STAR = 0.00475  # –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ TON
MIN_STARS = 50
MAX_STARS = 10000
REF_PERCENT = 0.01  # 1% –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É

USERS = {}   # user_id: {...}
ORDERS = {}  # order_id: {"user_id", "stars", "amount", "status"}

DATA_FILE = "users.json"


# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def load_users():
    global USERS
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            USERS = json.load(f)
    else:
        USERS = {}


def save_users():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(USERS, f, ensure_ascii=False, indent=2)


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏ ===
def generate_tx_id():
    return ''.join(random.choices(string.digits, k=6))


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = str(user.id)
    referrer = None

    if context.args:
        referrer = context.args[0]

    if user_id not in USERS:
        USERS[user_id] = {
            "username": user.username or "",
            "balance": 0,
            "referrals": [],
            "ref_earned": 0,
            "inviter": referrer if referrer and referrer != user_id else None,
            "history": []
        }

        if referrer and referrer in USERS:
            USERS[referrer]["referrals"].append(user_id)

        save_users()

    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_menu")]
    ]

    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëâ @{CHANNEL_USERNAME}\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="ref_system")],
        [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
    ])


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é ===
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    if query.data == "continue_menu":
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "buy_stars":
        await query.message.reply_text(
            f"‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MIN_STARS}\n"
            f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_STARS}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É: {PRICE_PER_STAR} TON\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
        )
        context.user_data["waiting_for_stars"] = True

    elif query.data == "history":
        history = USERS.get(user_id, {}).get("history", [])
        if history:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n" + "\n".join(history)
        else:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        await query.message.reply_text(text)

    elif query.data == "ref_system":
        user = USERS.get(user_id, {})
        balance = user.get("balance", 0)
        earned = user.get("ref_earned", 0)
        ref_link = f"https://t.me/{context.bot.username}?start={user_id}"

        text = (
            f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            f"üë§ –í–∞—à ID: {user_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} ‚≠ê\n"
            f"üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {earned:.2f} ‚≠ê\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            "üìù –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω SOON. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!"
        )
        await query.message.reply_text(text)

    elif query.data == "fake_buy":
        phrases = [
            "üö´ –ù–µ—Ç –¥–µ–Ω–µ–≥ ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç–∫–∏ üç≠",
            "ü§ó –í—Å—ë –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏! –ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π üíº",
            "ü•≤ –•–∞–ª—è–≤—ã –Ω–µ—Ç, –±—Ä–∞—Ç‚Ä¶ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –∏ TON üíé",
            "üêí –û–±–µ–∑—å—è–Ω–∞ —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –ø–æ—à–ª–∞ –±–∞–Ω–∞–Ω—ã —Å–æ–±–∏—Ä–∞—Ç—å üçå",
            "üï∫ –ó–≤—ë–∑–¥—ã –±–µ–∑ –¥–µ–Ω–µ–≥? –≠—Ç–æ –Ω–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –¥—Ä—É–∂–∏—â–µ üåå",
            "üòé –†–∞–±–æ—Ç–∞–π, –ø–ª–∞—Ç–∏ ‚Äî –ø–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã. –í—Å—ë –ø—Ä–æ—Å—Ç–æ üöÄ",
            "üèöÔ∏è –í –∫—Ä–µ–¥–∏—Ç –∑–≤—ë–∑–¥—ã –Ω–µ –≤—ã–¥–∞—ë–º, —Å–æ—Ä—Ä–∏ üí≥",
            "ü§° –ê–≥–∞, —â–∞—Å! –ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Å—ã—Ä‚Ä¶ –∏ —Ç–æ –≤ –º—ã—à–µ–ª–æ–≤–∫–µ üßÄ",
            "üßò –¢–µ—Ä–ø–µ–Ω–∏–µ, –º–æ–ª–æ–¥–µ—Ü. –î–µ–Ω–µ–≥ –Ω–µ—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –∫–æ–ø–∏—Ç—å üôè",
            "ü™ô TON –Ω–µ —Ä–∞—Å—Ç—É—Ç –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö, –∏—Ö –º–∞–π–Ω—è—Ç üíª"
        ]
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="continue_menu")]]
        await query.message.reply_text(random.choice(phrases), reply_markup=InlineKeyboardMarkup(keyboard))


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–≤–æ–¥ –∫–æ–ª-–≤–∞ –∑–≤—ë–∑–¥) ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_stars"):
        try:
            stars = int(update.message.text)
            if stars < MIN_STARS or stars > MAX_STARS:
                await update.message.reply_text(
                    f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_STARS} –¥–æ {MAX_STARS}."
                )
                return

            amount_ton = stars * PRICE_PER_STAR
            tx_id = generate_tx_id()
            context.user_data["waiting_for_stars"] = False

            order = {
                "id": tx_id,
                "user_id": update.message.from_user.id,
                "stars": stars,
                "amount": amount_ton,
                "status": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            }
            ORDERS[tx_id] = order

            text = (
                f"üí∞ –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}\n"
                f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {stars}\n"
                f"üíé –°—É–º–º–∞: {amount_ton:.2f} TON\n\n"
                f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount_ton:.2f} TON –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
                f"{TON_WALLET}\n\n"
                "üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
            )
            await update.message.reply_text(text, parse_mode="Markdown")

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç) ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)

    # –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É
    last_order = None
    for o in reversed(list(ORDERS.values())):
        if str(o["user_id"]) == user_id and o["status"] == "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
            last_order = o
            break

    if last_order:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}_{last_order['id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{last_order['id']}")
            ]
        ]

        # —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É
        photo_file = update.message.photo[-1].file_id
        await context.bot.send_photo(
            ADMIN_ID,
            photo=photo_file,
            caption=(
                f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username}\n"
                f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {last_order['stars']}\n"
                f"üíé –°—É–º–º–∞: {last_order['amount']:.2f} TON\n"
                f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{last_order['id']}\n"
                f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        await update.message.reply_text(
            "üì§ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )


# === –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç ===
async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("confirm_"):
        _, user_id, tx_id = query.data.split("_")
        user_id = str(user_id)
        order = ORDERS.get(tx_id)

        if order:
            order["status"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"

            if user_id not in USERS:
                USERS[user_id] = {
                    "username": "",
                    "balance": 0,
                    "referrals": [],
                    "ref_earned": 0,
                    "inviter": None,
                    "history": []
                }

            USERS[user_id]["history"].append(
                f"‚≠ê {order['stars']} | {order['amount']:.2f} TON | ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
            )
            save_users()

            await context.bot.send_message(
                int(user_id),
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥ ‚ú®"
            )
            await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–±–µ–∑ –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è).")

    elif query.data.startswith("reject_"):
        _, user_id, tx_id = query.data.split("_")
        user_id = str(user_id)
        order = ORDERS.get(tx_id)

        if order:
            order["status"] = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"

            if user_id not in USERS:
                USERS[user_id] = {
                    "username": "",
                    "balance": 0,
                    "referrals": [],
                    "ref_earned": 0,
                    "inviter": None,
                    "history": []
                }

            USERS[user_id]["history"].append(
                f"‚≠ê {order['stars']} | {order['amount']:.2f} TON | ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
            )
            save_users()

            await context.bot.send_message(
                int(user_id),
                f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüÜî –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']}"
            )
            await query.edit_message_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


# === –ö–æ–º–∞–Ω–¥–∞ /addstars –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def add_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return

    try:
        user_id = str(context.args[0])
        stars = int(context.args[1])

        if user_id not in USERS:
            USERS[user_id] = {
                "username": "",
                "balance": 0,
                "referrals": [],
                "ref_earned": 0,
                "inviter": None,
                "history": []
            }

        USERS[user_id]["balance"] += stars
        USERS[user_id]["history"].append(f"üéÅ –ê–¥–º–∏–Ω –Ω–∞—á–∏—Å–ª–∏–ª {stars} ‚≠ê")
        save_users()

        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars} ‚≠ê")
        await context.bot.send_message(int(user_id), f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars} ‚≠ê –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# === –ö–æ–º–∞–Ω–¥–∞ /massaddstars –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def mass_add_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return

    try:
        stars = int(context.args[0])
        count = 0

        for user_id in USERS.keys():
            USERS[user_id]["balance"] += stars
            USERS[user_id]["history"].append(f"üéÅ –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ {stars} ‚≠ê")
            try:
                await context.bot.send_message(int(user_id), f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stars} ‚≠ê (–º–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞)")
            except:
                pass
            count += 1

        save_users()
        await update.message.reply_text(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ {stars} ‚≠ê –≤—Å–µ–º ({count}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# === –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id == ADMIN_ID:
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS)}\n"
            f"üõí –ó–∞—è–≤–æ–∫: {len(ORDERS)}"
        )


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    load_users()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("addstars", add_stars))
    app.add_handler(CommandHandler("massaddstars", mass_add_stars))  # üî• –º–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–¥–∞—á–∞

    app.add_handler(CallbackQueryHandler(admin_handler, pattern="^(confirm_|reject_)"))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()


if __name__ == "__main__":
    main()
