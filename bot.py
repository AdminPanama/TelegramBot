import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Render Environment
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
TON_WALLET = os.getenv("TON_WALLET")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TON_WALLET:
    raise ValueError("‚ùå TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)
# ====================

PRICE_PER_STAR = 0.00475  # –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ TON
MIN_STARS = 50
MAX_STARS = 10000


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")]
    ]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ===
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy_stars":
        await query.message.reply_text(
            f"‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {MIN_STARS}\n"
            f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_STARS}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É: {PRICE_PER_STAR} TON\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
        )
        context.user_data["waiting_for_stars"] = True

    elif query.data == "history":
        history = context.user_data.get("history", [])
        if history:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n" + "\n".join(history)
        else:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        await query.message.reply_text(text)

    elif query.data.startswith("confirm_"):
        user_id = int(query.data.split("_")[1])
        amount = query.data.split("_")[2]

        if "history" in context.application.user_data.get(user_id, {}):
            history = context.application.user_data[user_id]["history"]
            for i in range(len(history)):
                if history[i].startswith(f"{amount}‚≠ê ‚Äî ‚è≥"):
                    history[i] = f"{amount}‚≠ê ‚Äî ‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"

        await query.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

        try:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]]
            )
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ {amount}‚≠ê –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ó–≤—ë–∑–¥—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã üéâ",
                reply_markup=keyboard
            )
        except:
            pass

    elif query.data.startswith("reject_"):
        user_id = int(query.data.split("_")[1])
        amount = query.data.split("_")[2]

        if "history" in context.application.user_data.get(user_id, {}):
            history = context.application.user_data[user_id]["history"]
            for i in range(len(history)):
                if history[i].startswith(f"{amount}‚≠ê ‚Äî ‚è≥"):
                    history[i] = f"{amount}‚≠ê ‚Äî ‚ùå –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"

        await query.message.reply_text(f"‚ùå –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

        try:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]]
            )
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ {amount}‚≠ê –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=keyboard
            )
        except:
            pass

    elif query.data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
            [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")]
        ]
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))


# === –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_stars"):
        try:
            amount = int(update.message.text)
            if amount < MIN_STARS:
                await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º—É–º {MIN_STARS}‚≠ê")
                return
            if amount > MAX_STARS:
                await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_STARS}‚≠ê")
                return

            price = amount * PRICE_PER_STAR  # —Ü–µ–Ω–∞ –≤ TON

            await update.message.reply_text(
                f"üí≥ –ó–∞ {amount}‚≠ê –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å **{price:.4f} TON**\n\n"
                f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n`{TON_WALLET}`\n\n"
                "‚ö†Ô∏è –ó–≤–µ–∑–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –¥–æ 2-—Ö —á–∞—Å–æ–≤ (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç).\n"
                "–ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown"
            )

            # üî• –í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            await update.message.reply_text(
                "‚ö†Ô∏è –í–ê–ñ–ù–û!\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞:\n"
                "1Ô∏è‚É£ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                "2Ô∏è‚É£ –í–∞—à @—é–∑–µ—Ä–Ω–µ–π–º\n"
                "3Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚≠ê –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏"
            )

            context.user_data["waiting_for_stars"] = False
            context.user_data["last_amount"] = amount  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    username = update.message.from_user.username or update.message.from_user.id
    user_id = update.message.from_user.id
    amount = context.user_data.get("last_amount", "‚ùì")

    caption = (
        f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"‚≠ê –û–ø–ª–∞—Ç–∏–ª: {amount} –∑–≤—ë–∑–¥"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    if "history" not in context.user_data:
        context.user_data["history"] = []
    context.user_data["history"].append(f"{amount}‚≠ê ‚Äî ‚è≥ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{user_id}_{amount}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{amount}")
    ]])
    await context.bot.send_photo(chat_id=ADMIN_ID, photo=photo, caption=caption, reply_markup=keyboard)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! ‚úÖ\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# === –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ ===
async def handle_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("waiting_for_stars"):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.ALL & ~filters.PHOTO, handle_other))

    app.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
