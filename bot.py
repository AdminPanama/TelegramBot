import os
import random
import string
import asyncpg
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Render Environment
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
TON_WALLET = os.getenv("TON_WALLET")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")  # –∏–º—è –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not ADMIN_ID:
    raise ValueError("‚ùå ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not TON_WALLET:
    raise ValueError("‚ùå TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not CHANNEL_USERNAME:
    raise ValueError("‚ùå CHANNEL_USERNAME –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

ADMIN_ID = int(ADMIN_ID)
# ====================

PRICE_PER_STAR = 0.00475  # –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É –≤ TON
MIN_STARS = 50
MAX_STARS = 10000
REF_BONUS = 10  # –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ


# === –ë–î ===
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT UNIQUE,
        username TEXT,
        invited_by BIGINT,
        balance INT DEFAULT 0,
        total_ref_earned INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW()
    );
    """)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        stars INT,
        amount NUMERIC,
        status TEXT,
        created_at TIMESTAMP DEFAULT NOW()
    );
    """)
    await conn.close()


async def get_user(telegram_id):
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id=$1", telegram_id)
    await conn.close()
    return user


async def add_user(telegram_id, username, invited_by=None):
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id=$1", telegram_id)
    if not user:
        await conn.execute(
            "INSERT INTO users (telegram_id, username, invited_by) VALUES ($1,$2,$3)",
            telegram_id, username, invited_by
        )
    await conn.close()


async def add_order(user_id, stars, amount, status="–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "INSERT INTO orders (user_id, stars, amount, status) VALUES ($1,$2,$3,$4)",
        user_id, stars, amount, status
    )
    await conn.close()


async def update_order_status(user_id, tx_id, status):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "UPDATE orders SET status=$1 WHERE user_id=$2 AND id=$3",
        status, user_id, tx_id
    )
    await conn.close()


async def add_bonus(inviter_id, bonus=REF_BONUS):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "UPDATE users SET balance = balance + $1, total_ref_earned = total_ref_earned + $1 WHERE telegram_id=$2",
        bonus, inviter_id
    )
    await conn.close()


async def get_balance_refstats_invites(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT balance, total_ref_earned FROM users WHERE telegram_id=$1", user_id)
    invites = await conn.fetchval("SELECT COUNT(*) FROM users WHERE invited_by=$1", user_id)
    await conn.close()
    if row:
        return row["balance"], row["total_ref_earned"], invites
    return 0, 0, 0


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏ ===
def generate_tx_id():
    return ''.join(random.choices(string.digits, k=6))


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    ref_id = None
    if context.args:  # –µ—Å–ª–∏ /start —Å —Ä–µ—Ñ —Å—Å—ã–ª–∫–æ–π
        try:
            ref_id = int(context.args[0])
        except:
            pass

    await add_user(user_id, username, ref_id)

    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_menu")]
    ]
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª üëâ @{CHANNEL_USERNAME}\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="buy_stars")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", callback_data="history")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="ref_system")],
        [InlineKeyboardButton("üòÇ –ö—É–ø–∏—Ç—å –±–µ–∑ –¥–µ–Ω–µ–≥", callback_data="fake_buy")]
    ])


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é ===
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "continue_menu":
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    elif query.data == "buy_stars":
        await query.message.reply_text(
            f"‚≠ê –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MIN_STARS}\n"
            f"‚≠ê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {MAX_STARS}\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –∑–≤–µ–∑–¥—É: {PRICE_PER_STAR} TON\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
        )
        context.user_data["waiting_for_stars"] = True

    elif query.data == "history":
        user_id = query.from_user.id
        conn = await asyncpg.connect(DATABASE_URL)
        rows = await conn.fetch("SELECT * FROM orders WHERE user_id=$1 ORDER BY created_at DESC LIMIT 10", user_id)
        await conn.close()
        if rows:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n" + "\n".join(
                [f"‚Ññ{r['id']} | ‚≠ê {r['stars']} | {r['amount']} TON | {r['status']}" for r in rows]
            )
        else:
            text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
        await query.message.reply_text(text)

    elif query.data == "ref_system":
        user_id = query.from_user.id
        balance, total_ref_earned, invites = await get_balance_refstats_invites(user_id)
        ref_link = f"https://t.me/{context.bot.username}?start={user_id}"

        text = (
            f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n"
            f"üîó –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
            f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *{invites}*\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: *{balance}* ‚≠ê\n"
            f"üåü –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç –¥—Ä—É–∑–µ–π: *{total_ref_earned}* ‚≠ê\n\n"
            f"‚ö° –ó–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +{REF_BONUS} ‚≠ê!\n\n"
            f"‚è≥ –í—ã–≤–æ–¥ –±–æ–Ω—É—Å–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω *—Å–∫–æ—Ä–æ*. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π üöÄ"
        )

        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="continue_menu")]]
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

    elif query.data == "fake_buy":
        phrases = [
            "üö´ –ù–µ—Ç –¥–µ–Ω–µ–≥ ‚Äî –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç–∫–∏ üç≠",
            "ü§ó –í—Å—ë –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏! –ò–¥–∏ —Ä–∞–±–æ—Ç–∞–π üíº",
            "ü•≤ –•–∞–ª—è–≤—ã –Ω–µ—Ç, –±—Ä–∞—Ç‚Ä¶ —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞ –∏ TON üíé",
        ]
        keyboard = [[InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="continue_menu")]]
        await query.message.reply_text(random.choice(phrases), reply_markup=InlineKeyboardMarkup(keyboard))


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–≤–æ–¥ –∫–æ–ª-–≤–∞ –∑–≤—ë–∑–¥) ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_stars"):
        try:
            stars = int(update.message.text)
            if stars < MIN_STARS or stars > MAX_STARS:
                await update.message.reply_text(
                    f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_STARS} –¥–æ {MAX_STARS}."
                )
                return

            amount_ton = stars * PRICE_PER_STAR
            tx_id = generate_tx_id()
            context.user_data["waiting_for_stars"] = False

            await add_order(update.message.from_user.id, stars, amount_ton)

            text = (
                f"üí∞ –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}\n"
                f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {stars}\n"
                f"üíé –°—É–º–º–∞: {amount_ton:.2f} TON\n\n"
                f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount_ton:.2f} TON –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
                f"`{TON_WALLET}`\n\n"
                "üì∏ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
            )
            await update.message.reply_text(text, parse_mode="Markdown")

            context.user_data["pending_order"] = {"id": tx_id, "stars": stars, "amount": amount_ton}

        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç) ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "pending_order" in context.user_data:
        order = context.user_data["pending_order"]

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{update.message.from_user.id}_{order['id']}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.message.from_user.id}_{order['id']}")
            ]
        ]

        # üî• –í–µ—Ä–Ω—É–ª –ø–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            ADMIN_ID,
            f"üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username}\n"
            f"‚≠ê –ö–æ–ª-–≤–æ –∑–≤—ë–∑–¥: {order['stars']}\n"
            f"üíé –°—É–º–º–∞: {order['amount']:.2f} TON\n"
            f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{order['id']}\n"
            f"‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        await update.message.reply_text("üì§ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# === –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç/–æ—Ç–∫–ª–æ–Ω—è–µ—Ç ===
async def admin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("confirm_"):
        _, user_id, tx_id = query.data.split("_")
        user_id = int(user_id)

        await update_order_status(user_id, tx_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

        # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞
        user = await get_user(user_id)
        if user and user["invited_by"]:
            conn = await asyncpg.connect(DATABASE_URL)
            cnt = await conn.fetchval("SELECT COUNT(*) FROM orders WHERE user_id=$1 AND status='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'", user_id)
            await conn.close()
            if cnt == 1:  # –ø–µ—Ä–≤–∞—è —É—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                await add_bonus(user["invited_by"])

        # üî• –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –¥–µ—Ç–∞–ª—è–º–∏
        await context.bot.send_message(
            user_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–≤—ë–∑–¥: {tx_id}\n"
            f"üÜî –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}"
        )
        await query.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    elif query.data.startswith("reject_"):
        _, user_id, tx_id = query.data.split("_")
        user_id = int(user_id)

        await update_order_status(user_id, tx_id, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

        # üî• –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –¥–µ—Ç–∞–ª—è–º–∏
        await context.bot.send_message(
            user_id,
            f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nüÜî –ó–∞—è–≤–∫–∞ ‚Ññ{tx_id}"
        )
        await query.message.reply_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


# === –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id == ADMIN_ID:
        conn = await asyncpg.connect(DATABASE_URL)
        users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
        orders_count = await conn.fetchval("SELECT COUNT(*) FROM orders")
        await conn.close()
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\nüõí –ó–∞—è–≤–æ–∫: {orders_count}")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(admin_handler, pattern="^(confirm_|reject_)"))
    app.add_handler(CallbackQueryHandler(menu_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    app.run_polling()


if __name__ == "__main__":
    import asyncio
    asyncio.run(init_db())
    main()
